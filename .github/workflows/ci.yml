name: Python CI/CD

on:
  push:
    branches:
      - main  # Rulează pe push-uri către ramura 'main'
  pull_request:
    branches:
      - main  # Rulează pe pull request-uri către ramura 'main'

jobs:
  # Jobul pentru Continuous Integration (CI)
  test:
    runs-on: ubuntu-latest  # Rulează pe un sistem Ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Face checkout la codul repository-ului

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Setează versiunea de Python

      - name: Install dependencies
        run: |
          pip install -r requirements.txt  # Instalează dependențele din requirements.txt

      - name: Run tests
        run: |
          pytest  # Rulează testele automatizate cu pytest

  # Jobul pentru Continuous Deployment (CD) pe Google Cloud
  deploy:
    runs-on: ubuntu-latest  # Rulează pe un sistem Ubuntu
    needs: test  # Acest job depinde de jobul 'test' și va rula doar dacă testele au trecut

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Face checkout la codul repository-ului

      # Setează Google Cloud CLI (gcloud)
      - name: Set up Google Cloud CLI
        run: |
          curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-396.0.0-linux-x86_64.tar.gz | tar xz
          ./google-cloud-sdk/install.sh

      - name: Authenticate to Google Cloud
        run: |
          echo "${{ secrets.GOOGLE_CLOUD_KEY }}" > $HOME/gcloud-key.json
          gcloud auth activate-service-account --key-file=$HOME/gcloud-key.json
          gcloud config set project ${{ secrets.GOOGLE_PROJECT_ID }}

      - name: Deploy to Google App Engine
        run: |
          gcloud app deploy  # Deploy pe Google App Engine
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $HOME/gcloud-key.json
